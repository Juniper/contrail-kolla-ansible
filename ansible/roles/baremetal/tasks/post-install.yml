---
- name: register /etc/docker/daemon.json
  stat:
    path: /etc/docker/daemon.json
  register: p

- name: create /etc/docker directory
  file:
    path: /etc/docker
    state: directory
    mode: 0755

- name: create emtpy /etc/docker/daemon.json is it doesn't exis
  copy:
    content: "{}"
    dest: /etc/docker/daemon.json
  when: not p.stat.exists

- name: read /etc/docker/daemon.json
  shell: cat /etc/docker/daemon.json
  register: docker_daemon_file

- name: set entries to json
  set_fact:
    docker_daemon: "{{ docker_daemon_file.stdout | from_json }}"

- name: check if docker_registry is already in file
  set_fact:
    is_registry_in: True
  when: docker_registry is defined and docker_registry in item.value
  with_dict: "{{ docker_daemon }}"

- name: add docker registry to new list if required
  set_fact:
    new_docker_registries: "{{ new_docker_registries|default([]) }} + [ '{{ docker_registry }}' ]"
    added: True
  when:
    - docker_registry is not none
    - is_registry_in is undefined

- name: add default registry to new list if required
  set_fact:
    new_docker_registries: "{{ new_docker_registries|default([]) }} + {{ item.value }}"
  when:
    - item.key == "insecure-registries"
    - added is defined and added == True
  with_dict: "{{ docker_daemon }}"

- name: create new registry string
  set_fact:
    reg_string: "{% raw %}{{% endraw %}\n \"insecure-registries\": [{% for arg1 in new_docker_registries %}\"{{arg1}}\"{% if not loop.last %},{% endif %}{% endfor %}]\n{% raw %}}{% endraw %}"
  when: added is defined and added == True

- name: empty existing file *danger danger*
  copy:
    content: ""
    dest: /etc/docker/daemon.json
  when: added is defined and added == True

- name: write to /etc/docker/daemon.json
  lineinfile:
    dest: /etc/docker/daemon.json
    line: "{{ reg_string |to_json}}"
  when: added is defined and added == True

- name: Reload docker service file
  become: True
  command: systemctl daemon-reload
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version > "14") or
        (ansible_os_family == "RedHat") or (ansible_distribution == "Debian")

- name: Configure docker service
  become: True
  template:
     src=docker_defaults.j2
     dest=/etc/default/docker
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version < "15")

- name: Docker mount shared
  command: mount --make-shared /run
  become: True
  when: (ansible_distribution == "Ubuntu" and ansible_distribution_major_version < "15")

- name: Get stat of libvirtd apparmor profile
  stat: path=/etc/apparmor.d/usr.sbin.libvirtd
  register: apparmor_libvirtd_profile
  when: ansible_distribution == "Ubuntu"

- name: Remove apparmor profile for libvirt
  command: apparmor_parser -R /etc/apparmor.d/usr.sbin.libvirtd
  become: True
  when:
    - ansible_distribution == "Ubuntu"
    - apparmor_libvirtd_profile.stat.exists | bool
  ignore_errors: yes

- name: Create docker group
  group:
     name: docker
  become: True

- name: Add kolla user to docker group
  user:
     name: kolla
     append: yes
     groups: docker
  become: True
  when: create_kolla_user | bool

- name: Start docker
  service:
     name: docker
     state: started
  become: True

- name: Restart docker
  service:
     name: docker
     state: restarted
  become: True

- name: Enable docker
  service:
     name: docker
     enabled: yes
  become: True

- name: Disable selinux
  selinux:
    policy: target
    state: permissive
  become: true
  when:
    - disable_selinux | bool
    - ansible_os_family == "RedHat"

- name: Reboot
  command: reboot -f
  become: True
  when:
   - reboot_required is defined
   - reboot_required | bool
